1. CPU占用率过高
top -p jvm进程ID
按H 看到线程信息--线程ID（十进制）
jstack命令查看jvm堆栈信息
根据线程ID去找到对应的问题代码
注意：十进制的线程ID转成 16进制的ID去查找

如果整体服务器的资源不足， 切断系统访问

2. 死锁
jstack 查看 deadlock

3. 死锁（活）
一个线程一直没结束  wait block------ 长时间运行
观察 那种执行了很久都没有执行完毕的线程

导致 用户访问无法响应,响应很慢
tomcat -- manager页面，看到线程池的使用情况

间隔一定的时间，收集stack数据，比对 内容的不同，查找出一直在运行的任务。
jstack 24815 > temp1.log
sleep 4s
jstack 24815 > temp2.log
echo "完毕"

抽取出每一个线程执行的任务信息(标记)
grep -rn "os_prio=" temp1.log | awk '{print $NF}' | sort > result-1.log
grep -rn "os_prio=" temp2.log | awk '{print $NF}' | sort > result-2.log
两个文件进行比对,找出交集
comm result-1.log result-2.log -1 -2

数据采样的间隔时间，根据业务场景来定， 大于一个正常处理的时间。

4. 资源不够用 --- 系统开多少线程比较合适?
计算型 -- 线程数量 不要太多（例如纯内存操作，建议 CPU*2）
I/O型 -- 网络/文件 阻塞，等待 根据你的业务情况
记住： 用线程池

5. 线程切换 --- 
futureTask异步编程，获取线程异步执行的结果。 典型 线程切换，资源互换场景

6. 协程 ---
协程 -- 语言特性，不涉及到操作系统层面








